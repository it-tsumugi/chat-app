{"version":3,"sources":["functions/handler/deleteAllChats.ts","functions/handler/addSeedData.ts","assets/style/color.ts","assets/style/media.ts","components/molucules/Header.tsx","components/atoms/button/DefaultButton.tsx","hooks/useAppSelector.ts","store/slices/latestChatOrderSlice.ts","components/atoms/input/DefaultInput.tsx","components/organisms/InputArea.tsx","functions/handler/addChat.ts","store/slices/chatDataSlice.ts","hooks/useAppDispatch.ts","functions/features/chatData/convertChatData.ts","store/slices/hasMoreSlice.ts","store/slices/lastChatOrderSlice.ts","assets/data/constNum.ts","store/slices/isChatsCompletedSlice.ts","components/organisms/ChatDisplayArea.tsx","functions/handler/loadMore.ts","components/pages/ChatPage.tsx","hooks/useFetchData.ts","assets/data/pathData.ts","router/ComponentRouter.tsx","store/store.ts","App.tsx","index.tsx","config.ts","functions/getChatRef.ts"],"names":["deleteAllChats","set","chatRef","catch","error","window","alert","console","log","addSeedData","timestamp","moment","seedData","i","strNum","user_name","text","createdAt","format","order","MAIN_COLOR","media","xl","mediaOriginal","greaterThan","lg","between","md","lessThan","lessThanlg","Header","SComponentContainer","STitle","SSubTitle","SButtonArea","SButton","onClick","styled","div","h1","h2","button","DefaultButton","useAppSelector","useSelector","latestChatOrderSlice","createSlice","name","initialState","START_CHAT_ORDER","reducers","setLatestChatOrder","state","action","payload","latestChatOrderReducer","reducer","actions","DefaultInput","input","InputArea","useState","isLogin","setIsLogin","userName","setUserName","setText","latestChatOrder","LoginedForm","onSubmit","e","preventDefault","SUserName","value","placeholder","onChange","target","props","length","postData","push","addChat","type","form","span","chatDataSlice","setChatData","chatDataReducer","useAppDispatch","dispatch","useDispatch","convertChatData","dbChatData","bufChatData","Object","entries","map","key","reversedBufChatData","reverse","newBufChatData","chat","index","hasMoreSlice","setHasMore","hasMoreReducer","lastChatOrderSlice","setLastChatOrder","lastChatOrderReducer","isChatsCompletedSlice","setIsChatsCompleted","isChatsCompletedReducer","ChatDisplayArea","chatData","hasMore","isChatsCompleted","lastChatOrder","loadMore","chatQuery","query","orderByChild","endBefore","limitToLast","LOAD_CHAT_NUM","onValue","snapshot","val","newChatData","lastChatData","onlyOnce","loader","SCircularProgress","initialLoad","threshold","item","SChatContainer","SText","STime","fromNow","CircularProgress","ChatPage","locale","useEffect","useFetchData","pathData","ComponentRouter","exact","path","to","pathname","store","configureStore","App","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","ref","getChatRef","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAIaA,EAAiB,WAC5BC,YAAIC,GAAS,IAAIC,OAAM,SAACC,GACtBC,OAAOC,MAAM,0GACbC,QAAQC,IAAIJ,OCDHK,EAAc,WAIzB,IAHA,IAAIC,EAAYC,MACZC,EAA6B,GAExBC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAiB,GACTA,EAARD,EAAI,GAAa,IAAMA,EAChB,UAAMA,GAEjBD,EAASC,GAAK,CACZE,UAAU,qBAAD,OAAQF,GACjBG,KAAK,GAAD,OAAKH,EAAI,GACbI,UAAWP,EAAUQ,OAAV,2BAAqCJ,IAChDK,MAAON,EAAI,GAGfZ,YAAIC,GAASU,ICtBFQ,EAAa,a,QCkCXC,EAXiD,CAE9DC,GAAI,kBAAaC,IAAcC,YAAY,SAA1B,yBAEjBC,GAAI,kBAAaF,IAAcG,QAAQ,SAAU,SAAhC,yBAEjBC,GAAI,kBAAaJ,IAAcK,SAAS,UAAvB,yBAEjBC,WAAY,kBAAaN,IAAcK,SAAS,SAAvB,0B,OCvBdE,EAAc,WACzB,OACE,eAACC,GAAD,WACE,cAACC,GAAD,4BACA,cAACC,GAAD,2DACA,eAACC,GAAD,WACE,cAACC,GAAD,CAASC,QAASpC,EAAlB,gCACA,cAACmC,GAAD,CAASC,QAAS3B,EAAlB,yDAMFsB,GAAsBM,IAAOC,IAAV,iJACgBlB,GAMnCY,GAASK,IAAOE,GAAV,2EAGRlB,EAAMI,GAHE,sDAMRJ,EAAMM,GANE,uDAWNM,GAAYI,IAAOG,GAAV,qGAKXnB,EAAMI,GALK,sDAQXJ,EAAMM,GARK,uDAaTO,GAAcG,IAAOC,IAAV,iFAMXH,GAAUE,IAAOI,OAAV,6DAETpB,EAAMI,GAFG,sDAKTJ,EAAMM,GALG,sD,SCrDAe,GAAgBL,IAAOI,OAAV,iWAEJrB,EAiBlBC,EAAMI,GAnBgB,sDAsBtBJ,EAAMM,GAtBgB,uD,SCAbgB,GAAkDC,ICGlDC,GAAuBC,aAAY,CAC9CC,KAAM,kBACNC,aAJ2BC,EAK3BC,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1B,OAAOA,EAAOC,YAMPC,GAAyBV,GAAqBW,QAG5CL,GAAuBN,GAAqBY,QAA5CN,mBCjBFO,GAAerB,IAAOsB,MAAV,kQAQAvC,EAInBC,EAAMI,GAZa,sDAenBJ,EAAMM,GAfa,uDCKZiC,GAAiB,WAAO,IAAD,EACJC,oBAAS,GADL,oBAC3BC,EAD2B,KAClBC,EADkB,OAEFF,mBAAS,IAFP,oBAE3BG,EAF2B,KAEjBC,EAFiB,OAGVJ,mBAAS,IAHC,oBAG3B7C,EAH2B,KAGrBkD,EAHqB,KAI1BC,EFgBD,CAAEA,gBAHexB,IACtB,SAACS,GAAD,OAAsBA,EAAMe,oBEdtBA,gBAUR,OACE,cAAC,GAAD,UACGL,EACC,eAACM,GAAD,CACEC,SAAU,SAACC,GACTA,EAAEC,kBAFN,UAKE,cAACC,GAAD,UAAYR,IACZ,cAACN,GAAD,CACEe,MAAOzD,EACP0D,YAAY,yDACZC,SAAU,SAACL,GAAD,OAAOJ,EAAQI,EAAEM,OAAOH,UAEpC,cAAC/B,GAAD,CACEN,QAAS,kBCzBE,SAACyC,GAAsB,IACpCb,EAAsDa,EAAtDb,SAAUhD,EAA4C6D,EAA5C7D,KAAMkD,EAAsCW,EAAtCX,QAASJ,EAA6Be,EAA7Bf,QAASK,EAAoBU,EAApBV,gBAE1C,IAAgB,IAAZL,EACFzD,OAAOC,MAAM,qEACR,GAAoB,IAAhBU,EAAK8D,OACdzE,OAAOC,MAAM,sFACR,CACL,IACMyE,EAA2B,CAC/BhE,UAAWiD,EACXhD,KAAMA,EACNC,UAJgBN,MAIKO,OAAO,uBAC5BC,MAAOgD,EAAkB,GAE3Ba,YAAK9E,GAAS6E,GACdb,EAAQ,KDUEe,CAAQ,CACNjB,WACAhD,OACAkD,UACAJ,UACAK,qBAGJe,KAAK,SAVP,6BAgBF,iCACE,cAACxB,GAAD,CACEe,MAAOT,EACPU,YAAY,uFACZC,SAAU,SAACL,GAAD,OAAOL,EAAYK,EAAEM,OAAOH,UAExC,cAAC/B,GAAD,CAAeN,QA5CT,WACY,IAApB4B,EAASc,OACXzE,OAAOC,MAAM,wFAEbyD,GAAW,IAwCP,4CAOJhC,GAAsBM,IAAOC,IAAV,oHAKrBjB,EAAMI,GALe,sDAQrBJ,EAAMM,GARe,uDAanByC,GAAc/B,IAAO8C,KAAV,kGAMXX,GAAYnC,IAAO+C,KAAV,oD,6BE9EFC,GAAgBvC,aAAY,CACvCC,KAAM,WACNC,aAJmC,GAKnCE,SAAU,CACRoC,YAAa,SAAClC,EAAOC,GACnB,OAAOA,EAAOC,YAMPiC,GAAkBF,GAAc7B,QAG9B8B,GAAgBD,GAAc5B,QAA9B6B,YCnBFE,GAAiB,WAE5B,MAAO,CAAEC,SADQC,gB,kBCENC,GAAkB,SAACC,GAE9B,IAAMC,EAAiCC,OAAOC,QAC5CH,GAAc,IACdI,KAAI,0CAAmB,CACvBC,IADI,KAEJxB,MAFI,SAMAyB,EAAyC,aAAIL,GAAaM,UAG5DC,EAAiC,GAMrC,OALAF,EAAoBF,KAAI,SAACK,EAAMC,GAE7B,OADAF,EAAeE,GAAf,6BAA6BD,EAAK5B,OAAlC,IAAyCwB,IAAKI,EAAKJ,MAC5C,KAGFG,GClBIG,GAAezD,aAAY,CACtCC,KAAM,UACNC,cAJ4B,EAK5BE,SAAU,CACRsD,WAAY,SAACpD,EAAOC,GAClB,OAAOA,EAAOC,YAMPmD,GAAiBF,GAAa/C,QAG5BgD,GAAeD,GAAa9C,QAA5B+C,WCbFE,GAAqB5D,aAAY,CAC5CC,KAAM,gBACNC,aCR8B,EDS9BE,SAAU,CACRyD,iBAAkB,SAACvD,EAAOC,GACxB,OAAOA,EAAOC,YAMPsD,GAAuBF,GAAmBlD,QAGxCmD,GAAqBD,GAAmBjD,QAAxCkD,iBEfFE,GAAwB/D,aAAY,CAC/CC,KAAM,mBACNC,cAJ4B,EAK5BE,SAAU,CACR4D,oBAAqB,SAAC1D,EAAOC,GAC3B,OAAOA,EAAOC,YAMPyD,GAA0BF,GAAsBrD,QAG9CsD,GAAwBD,GAAsBpD,QAA9CqD,oBCNFE,GAAkB,WAAO,IAC5BC,EPWD,CAAEA,SADQtE,IAAe,SAACS,GAAD,OAAsBA,EAAM6D,aOVpDA,SACAC,EJUD,CAAEA,QADOvE,IAAe,SAACS,GAAD,OAAsBA,EAAM8D,YITnDA,QACAC,EDWD,CAAEA,iBAHgBxE,IACvB,SAACS,GAAD,OAAsBA,EAAM+D,qBCTtBA,iBACAC,EHWD,CAAEA,cAHazE,IACpB,SAACS,GAAD,OAAsBA,EAAMgE,kBGTtBA,cACA3B,EAAaD,KAAbC,SAER,OACE,cAAC,GAAD,UACG0B,EACC,cAAC,KAAD,CACEE,SAAU,kBCDI,SAACxC,GAAsB,IACrCY,EAA+CZ,EAA/CY,SAAUwB,EAAqCpC,EAArCoC,SAAUG,EAA2BvC,EAA3BuC,cAAeF,EAAYrC,EAAZqC,QACrCI,EAAmBC,YACvBrH,GACAsH,YAAa,SACbC,YAAUL,GACVM,YAAYC,KAGVT,GACFU,YACEN,GACA,SAACO,GAEC,IAAMhC,EAA8BF,GAAgBkC,EAASC,OACvDC,EAAW,uBAAOd,GAAP,aAAoBpB,IAIrC,GAHAJ,EAASH,GAAYyC,IAGM,IAAvBA,EAAYjD,OAAc,CAC5B,IAAMkD,EAAeD,EAAYA,EAAYjD,OAAS,GH3ChC,IG4ClBkD,EAAa7G,OACfsE,EAASe,IAAW,IAEtBf,EAASkB,GAAiBqB,EAAa7G,WAG3C,CACE8G,UAAU,ID1BNZ,CAAS,CACP5B,WACAwB,WACAG,gBACAF,aAGJA,QAASA,EACTgB,OAAQ,cAACC,GAAD,GAAwB,GAChCC,aAAa,EACbC,UAAW,GAZb,SAcuB,IAApBpB,EAASnC,OACR,sGAEAmC,EAASjB,KAAI,SAACsC,GACZ,OACE,eAACC,GAAD,WACE,cAAC,GAAD,UAAYD,EAAKvH,YACjB,cAACyH,GAAD,UAAQF,EAAKtH,OACb,cAACyH,GAAD,UAAQ9H,IAAO2H,EAAKrH,WAAWyH,cAHZJ,EAAKrC,UAUlC,cAACkC,GAAD,OAMFpG,GAAsBM,IAAOC,IAAV,gIAKrBjB,EAAMI,GALe,sDAQrBJ,EAAMM,GARe,uDAanB4G,GAAiBlG,IAAOC,IAAV,4MASdkC,GAAYnC,IAAOC,IAAV,kGAMTkG,GAAQnG,IAAOC,IAAV,4EAKLmG,GAAQpG,IAAOC,IAAV,sIAQL6F,GAAoB9F,YAAOsG,KAAPtG,CAAH,0CACZjB,GE3FEwH,GAAgB,WAM3B,OALAjI,IAAOkI,OAAO,MCOY,WAAO,IACzBpD,EAAaD,KAAbC,SACF6B,EAAmBC,YACvBrH,GACAsH,YAAa,SACbE,YLxB0B,KK2B5BoB,qBAAU,WAERlB,YAAQL,YAAMD,IAAY,SAACO,GAEzB,IAAME,EAAcpC,GAAgBkC,EAASC,OAI7C,GAHArC,EAASH,GAAYyC,IAGM,IAAvBA,EAAYjD,OACdW,EAAStC,GAAmBF,IAC5BwC,EAASkB,GLnCe,QKoCnB,CACL,IAAMqB,EAAeD,EAAYA,EAAYjD,OAAS,GACtDW,EAAStC,GAAmB4E,EAAY,GAAG5G,QAC3CsE,EAASkB,GAAiBqB,EAAa7G,QAIrC4G,EAAYjD,OL7CQ,GK8CtBW,EAASe,IAAW,IAEpBf,EAASe,IAAW,IAGtBf,EAASqB,IAAoB,SAI9B,IDxCHiC,GAGE,eAAC,GAAD,WACE,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QAKAhH,GAAsBM,IAAOC,IAAV,kDE1BZ0G,GAAuB,ICOvBC,GAAuB,WAChC,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMH,GAAnB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOG,KAAK,IAAZ,SACI,cAAC,IAAD,CAAUC,GAAI,CAAEC,SAAUL,cCPjCM,GAAQC,aAAe,CAClC/F,QAAS,CACPyD,SAAU1B,GACV4B,iBAAkBJ,GAClBG,QAAST,GACTtC,gBAAiBZ,GACjB6D,cAAeR,MCPN4C,GAAW,WACtB,OACE,cAAC,IAAD,CAAUF,MAAOA,GAAjB,SACE,cAAC,GAAD,OCDOG,GAAMC,YCTW,CAC1BC,OAAQ,0CACRC,WAAY,iCACZC,YACI,2EACJC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDCNhK,GEFa,SAACuJ,GAEvB,IAAMU,EAAeC,YAAYX,GAGjC,OADmCY,YAAIF,EAAI,SFFxBG,CAAWb,IAElCc,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7051d90f.chunk.js","sourcesContent":["import { set } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\n\nexport const deleteAllChats = () => {\n  set(chatRef, {}).catch((error) => {\n    window.alert(\"データの削除時に問題が発生しました\");\n    console.log(error);\n  });\n};\n","import moment from \"moment\";\nimport { set } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { dbChatDataType } from \"../../assets/type/dataType\";\n\nexport const addSeedData = () => {\n  let timestamp = moment();\n  let seedData: dbChatDataType[] = [];\n\n  for (let i = 0; i < 60; i++) {\n    let strNum: string = \"\";\n    if (i < 10) strNum = \"0\" + i;\n    else strNum = `${i}`;\n\n    seedData[i] = {\n      user_name: `テスト${i}`,\n      text: `${i + 1}`,\n      createdAt: timestamp.format(`YYYY-MM-DD HH:mm:${strNum}`),\n      order: i + 1,\n    };\n  }\n  set(chatRef, seedData);\n};\n","export const MAIN_COLOR = \"dodgerblue\";\n","import mediaOriginal from \"styled-media-query\";\nimport {\n  ThemedStyledProps,\n  InterpolationValue,\n  FlattenInterpolation,\n} from \"styled-components\";\n\n/**\n * https://github.com/morajabi/styled-media-query/blob/master/src/index.d.ts\n */\ntype InterpolationFunction<Props, Theme> = (\n  props: ThemedStyledProps<Props, Theme>\n) => InterpolationValue | FlattenInterpolation<ThemedStyledProps<Props, Theme>>;\n\ntype GeneratorFunction<Props, Theme> = (\n  strings: TemplateStringsArray,\n  ...interpolations: (\n    | InterpolationValue\n    | InterpolationFunction<Props, Theme>\n    | FlattenInterpolation<ThemedStyledProps<Props, Theme>>\n  )[]\n) => any;\n\nconst media: { [v: string]: GeneratorFunction<unknown, any> } = {\n  /*1170px以上*/\n  xl: (...args) => mediaOriginal.greaterThan(\"large\")(...args),\n  /*768px以上1170px以下*/\n  lg: (...args) => mediaOriginal.between(\"medium\", \"large\")(...args),\n  /*768px以下*/\n  md: (...args) => mediaOriginal.lessThan(\"medium\")(...args),\n  /*1170px以下*/\n  lessThanlg: (...args) => mediaOriginal.lessThan(\"large\")(...args),\n};\n\nexport default media;\n","import { VFC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { deleteAllChats } from \"../../functions/handler/deleteAllChats\";\nimport { addSeedData } from \"../../functions/handler/addSeedData\";\nimport { MAIN_COLOR } from \"../../assets/style/color\";\nimport media from \"../../assets/style/media\";\n\nexport const Header: VFC = () => {\n  return (\n    <SComponentContainer>\n      <STitle>Realtime Chat</STitle>\n      <SSubTitle>React/React Redux/Firebase Realtime Database</SSubTitle>\n      <SButtonArea>\n        <SButton onClick={deleteAllChats}>全削除</SButton>\n        <SButton onClick={addSeedData}>シードデータ</SButton>\n      </SButtonArea>\n    </SComponentContainer>\n  );\n};\n\nconst SComponentContainer = styled.div`\n  background: linear-gradient(to left, ${MAIN_COLOR}, skyblue);\n  color: white;\n  text-align: center;\n  position: relative;\n`;\n\nconst STitle = styled.h1`\n  font-size: 32px;\n  margin: 0;\n  ${media.lg`\n    font-size: 30px;\n    `}\n  ${media.md`\n    font-size: 28px;\n    `}\n`;\n\nconst SSubTitle = styled.h2`\n  font-weight: normal;\n  margin: 0;\n\n  font-size: 22px;\n  ${media.lg`\n    font-size: 20px;\n    `}\n  ${media.md`\n    font-size: 18px;\n    `}\n`;\n\nconst SButtonArea = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nconst SButton = styled.button`\n  font-size: 12px;\n  ${media.lg`\n    font-size: 10px;\n    `}\n  ${media.md`\n    font-size: 8px;\n    `}\n`;\n","import styled from \"styled-components\";\nimport media from \"../../../assets/style/media\";\n\nimport { MAIN_COLOR } from \"../../../assets/style/color\";\n\nexport const DefaultButton = styled.button`\n  color: #ffffff;\n  background-color: ${MAIN_COLOR};\n  margin: 5px;\n  padding: 6px 10px;\n  cursor: pointer;\n\n  border-radius: 30px;\n  border: none;\n  box-shadow: 4px 4px 3px gray;\n\n  transition: 0.3s;\n  &:hover {\n    box-shadow: none;\n    text-decoration: none;\n    opacity: 0.6;\n  }\n\n  font-size: 14px;\n  ${media.lg`\n    font-size: 12px;\n    `}\n  ${media.md`\n    font-size: 10px;\n    `}\n`;\n","import { useSelector } from \"react-redux\";\nimport { TypedUseSelectorHook } from \"react-redux\";\n\nimport { RootState } from \"../assets/type/reduxType\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\nconst initialState: number = START_CHAT_ORDER - 1;\n\nexport const latestChatOrderSlice = createSlice({\n  name: \"latestChatOrder\",\n  initialState: initialState,\n  reducers: {\n    setLatestChatOrder: (state, action: PayloadAction<number>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const latestChatOrderReducer = latestChatOrderSlice.reducer;\n\n//action\nexport const { setLatestChatOrder } = latestChatOrderSlice.actions;\n\n//selector\n\nexport const useLatestChatOrderSelector = () => {\n  const latestChatOrder = useAppSelector(\n    (state: RootState) => state.latestChatOrder\n  );\n  return { latestChatOrder };\n};\n","import styled from \"styled-components\";\nimport media from \"../../../assets/style/media\";\n\nimport { MAIN_COLOR } from \"../../../assets/style/color\";\n\nexport const DefaultInput = styled.input`\n  height: 30px;\n  width: 30vw;\n  padding-left: 20px;\n  border-radius: 30px;\n  border: 0;\n  box-sizing: border-box;\n  :focus {\n    outline: 2px solid ${MAIN_COLOR};\n  }\n  ::placeholder {\n    font-size: 14px;\n    ${media.lg`\n    font-size: 12px;\n    `}\n    ${media.md`\n    font-size: 10px;\n    `}\n  }\n`;\n","import { useState, VFC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { DefaultButton } from \"../atoms/button/DefaultButton\";\n\nimport { addChat } from \"../../functions/handler/addChat\";\nimport { useLatestChatOrderSelector } from \"../../store/slices/latestChatOrderSlice\";\nimport media from \"../../assets/style/media\";\nimport { DefaultInput } from \"../atoms/input/DefaultInput\";\n\nexport const InputArea: VFC = () => {\n  const [isLogin, setIsLogin] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const { latestChatOrder } = useLatestChatOrderSelector();\n\n  const login = () => {\n    if (userName.length === 0) {\n      window.alert(\"ユーザー名を入力してください\");\n    } else {\n      setIsLogin(true);\n    }\n  };\n\n  return (\n    <SComponentContainer>\n      {isLogin ? (\n        <LoginedForm\n          onSubmit={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <SUserName>{userName}</SUserName>\n          <DefaultInput\n            value={text}\n            placeholder=\"メッセージをどうぞ\"\n            onChange={(e) => setText(e.target.value)}\n          />\n          <DefaultButton\n            onClick={() =>\n              addChat({\n                userName,\n                text,\n                setText,\n                isLogin,\n                latestChatOrder,\n              })\n            }\n            type=\"submit\"\n          >\n            送信\n          </DefaultButton>\n        </LoginedForm>\n      ) : (\n        <form>\n          <DefaultInput\n            value={userName}\n            placeholder=\"ユーザー名を入力してください\"\n            onChange={(e) => setUserName(e.target.value)}\n          />\n          <DefaultButton onClick={login}>ログイン</DefaultButton>\n        </form>\n      )}\n    </SComponentContainer>\n  );\n};\n\nconst SComponentContainer = styled.div`\n  background-color: #d0e7e7;\n  text-align: center;\n\n  font-size: 16px;\n  ${media.lg`\n    font-size: 14px;\n    `}\n  ${media.md`\n    font-size: 12px;\n    `}\n`;\n\nconst LoginedForm = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SUserName = styled.span`\n  padding-right: 20px;\n`;\n","import moment from \"moment\";\nimport { push } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { dbChatDataType } from \"../../assets/type/dataType\";\n\ntype propsType = {\n  userName: string;\n  text: string;\n  setText: React.Dispatch<React.SetStateAction<string>>;\n  isLogin: boolean;\n  latestChatOrder: number;\n};\n\nexport const addChat = (props: propsType) => {\n  const { userName, text, setText, isLogin, latestChatOrder } = props;\n\n  if (isLogin === false) {\n    window.alert(\"ログインしてください\");\n  } else if (text.length === 0) {\n    window.alert(\"テキストを入力してください\");\n  } else {\n    const timestamp = moment();\n    const postData: dbChatDataType = {\n      user_name: userName,\n      text: text,\n      createdAt: timestamp.format(\"YYYY-MM-DD HH:mm:ss\"),\n      order: latestChatOrder + 1,\n    };\n    push(chatRef, postData);\n    setText(\"\");\n  }\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { chatDataType } from \"../../assets/type/dataType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: chatDataType[] = [];\n\nexport const chatDataSlice = createSlice({\n  name: \"chatData\",\n  initialState: initialState,\n  reducers: {\n    setChatData: (state, action: PayloadAction<chatDataType[]>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const chatDataReducer = chatDataSlice.reducer;\n\n//action\nexport const { setChatData } = chatDataSlice.actions;\n\n//selector\nexport const useChatDataSelector = () => {\n  const chatData = useAppSelector((state: RootState) => state.chatData);\n  return { chatData };\n};\n","import { AppDispatch } from \"../assets/type/reduxType\";\nimport { useDispatch } from \"react-redux\";\n\nexport const useAppDispatch = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  return { dispatch };\n};\n","import {\n  bufChatDataType,\n  chatDataType,\n  dbChatDataType,\n} from \"../../../assets/type/dataType\";\n\nexport const convertChatData = (dbChatData: any) => {\n  //jsonを配列に変換\n  const bufChatData: bufChatDataType[] = Object.entries<dbChatDataType>(\n    dbChatData || {}\n  ).map(([key, value]) => ({\n    key: key,\n    value: value,\n  }));\n\n  //非破壊的に逆順に変更\n  const reversedBufChatData: bufChatDataType[] = [...bufChatData].reverse();\n\n  //valueを展開して見やすく変換\n  let newBufChatData: chatDataType[] = [];\n  reversedBufChatData.map((chat, index) => {\n    newBufChatData[index] = { ...chat.value, key: chat.key };\n    return 0;\n  });\n\n  return newBufChatData;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: boolean = true;\n\nexport const hasMoreSlice = createSlice({\n  name: \"hasMore\",\n  initialState: initialState,\n  reducers: {\n    setHasMore: (state, action: PayloadAction<boolean>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const hasMoreReducer = hasMoreSlice.reducer;\n\n//action\nexport const { setHasMore } = hasMoreSlice.actions;\n\n//selector\n\nexport const useHasMoreSelector = () => {\n  const hasMore = useAppSelector((state: RootState) => state.hasMore);\n  return { hasMore };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\nconst initialState: number = START_CHAT_ORDER;\n\nexport const lastChatOrderSlice = createSlice({\n  name: \"lastChatOrder\",\n  initialState: initialState,\n  reducers: {\n    setLastChatOrder: (state, action: PayloadAction<number>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const lastChatOrderReducer = lastChatOrderSlice.reducer;\n\n//action\nexport const { setLastChatOrder } = lastChatOrderSlice.actions;\n\n//selector\n\nexport const useLastChatOrderSelector = () => {\n  const lastChatOrder = useAppSelector(\n    (state: RootState) => state.lastChatOrder\n  );\n  return { lastChatOrder };\n};\n","export const FETCH_CHAT_NUM = 40;\nexport const LOAD_CHAT_NUM = 10;\nexport const START_CHAT_ORDER = 1;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: boolean = false;\n\nexport const isChatsCompletedSlice = createSlice({\n  name: \"isChatsCompleted\",\n  initialState: initialState,\n  reducers: {\n    setIsChatsCompleted: (state, action: PayloadAction<boolean>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const isChatsCompletedReducer = isChatsCompletedSlice.reducer;\n\n//action\nexport const { setIsChatsCompleted } = isChatsCompletedSlice.actions;\n\n//selector\n\nexport const useIsChatsCompletedSelector = () => {\n  const isChatsCompleted = useAppSelector(\n    (state: RootState) => state.isChatsCompleted\n  );\n  return { isChatsCompleted };\n};\n","import InfiniteScroll from \"react-infinite-scroller\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport { useChatDataSelector } from \"../../store/slices/chatDataSlice\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport { loadMore } from \"../../functions/handler/loadMore\";\nimport { useIsChatsCompletedSelector } from \"../../store/slices/isChatsCompletedSlice\";\nimport { useHasMoreSelector } from \"../../store/slices/hasMoreSlice\";\nimport { useLastChatOrderSelector } from \"../../store/slices/lastChatOrderSlice\";\nimport { MAIN_COLOR } from \"../../assets/style/color\";\nimport media from \"../../assets/style/media\";\n\nexport const ChatDisplayArea = () => {\n  const { chatData } = useChatDataSelector();\n  const { hasMore } = useHasMoreSelector();\n  const { isChatsCompleted } = useIsChatsCompletedSelector();\n  const { lastChatOrder } = useLastChatOrderSelector();\n  const { dispatch } = useAppDispatch();\n\n  return (\n    <SComponentContainer>\n      {isChatsCompleted ? (\n        <InfiniteScroll\n          loadMore={() =>\n            loadMore({\n              dispatch,\n              chatData,\n              lastChatOrder,\n              hasMore,\n            })\n          }\n          hasMore={hasMore}\n          loader={<SCircularProgress key={0} />}\n          initialLoad={false}\n          threshold={50}\n        >\n          {chatData.length === 0 ? (\n            <span>チャットが存在しません</span>\n          ) : (\n            chatData.map((item) => {\n              return (\n                <SChatContainer key={item.key}>\n                  <SUserName>{item.user_name}</SUserName>\n                  <SText>{item.text}</SText>\n                  <STime>{moment(item.createdAt).fromNow()}</STime>\n                </SChatContainer>\n              );\n            })\n          )}\n        </InfiniteScroll>\n      ) : (\n        <SCircularProgress />\n      )}\n    </SComponentContainer>\n  );\n};\n\nconst SComponentContainer = styled.div`\n  justify-content: center;\n  margin: 5px;\n  text-align: center;\n  font-size: 16px;\n  ${media.lg`\n    font-size: 14px;\n    `}\n  ${media.md`\n    font-size: 12px;\n    `}\n`;\n\nconst SChatContainer = styled.div`\n  display: grid;\n  align-items: center;\n  text-align: left;\n  border-bottom: 2px #cecece solid;\n  grid-template-rows: 40px 25px;\n  grid-template-columns: 30vw 40vw 20vw;\n`;\n\nconst SUserName = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  font-weight: bold;\n`;\n\nconst SText = styled.div`\n  grid-column-start: 2;\n  grid-column-end: 4;\n`;\n\nconst STime = styled.div`\n  grid-column-start: 3;\n  grid-column-end: 4;\n  grid-row-start: 2;\n  grid-row-end: 3;\n  color: gray;\n`;\n\nconst SCircularProgress = styled(CircularProgress)`\n  color: ${MAIN_COLOR};\n`;\n","import {\n  query,\n  limitToLast,\n  Query,\n  onValue,\n  endBefore,\n  orderByChild,\n} from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { chatDataType } from \"../../assets/type/dataType\";\nimport { AppDispatch } from \"../../assets/type/reduxType\";\nimport { setChatData } from \"../../store/slices/chatDataSlice\";\nimport { convertChatData } from \"../features/chatData/convertChatData\";\nimport { setHasMore } from \"../../store/slices/hasMoreSlice\";\nimport { setLastChatOrder } from \"../../store/slices/lastChatOrderSlice\";\nimport { LOAD_CHAT_NUM, START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\ntype propsType = {\n  hasMore: boolean;\n  dispatch: AppDispatch;\n  chatData: chatDataType[];\n  lastChatOrder: number;\n};\n\nexport const loadMore = (props: propsType) => {\n  const { dispatch, chatData, lastChatOrder, hasMore } = props;\n  const chatQuery: Query = query(\n    chatRef,\n    orderByChild(\"order\"),\n    endBefore(lastChatOrder),\n    limitToLast(LOAD_CHAT_NUM + 1)\n  );\n\n  if (hasMore) {\n    onValue(\n      chatQuery,\n      (snapshot) => {\n        //追加データを変換して状態に保存\n        const bufChatData: chatDataType[] = convertChatData(snapshot.val());\n        const newChatData = [...chatData, ...bufChatData];\n        dispatch(setChatData(newChatData));\n\n        //最後のチャット番号の保存と追加データの存在を判定\n        if (newChatData.length !== 0) {\n          const lastChatData = newChatData[newChatData.length - 1];\n          if (lastChatData.order === START_CHAT_ORDER) {\n            dispatch(setHasMore(false));\n          }\n          dispatch(setLastChatOrder(lastChatData.order));\n        }\n      },\n      {\n        onlyOnce: true,\n      }\n    );\n  }\n};\n","import { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport \"moment/locale/ja\";\n\nimport { Header } from \"../molucules/Header\";\nimport { InputArea } from \"../organisms/InputArea\";\nimport { ChatDisplayArea } from \"../organisms/ChatDisplayArea\";\n\nimport { useFetchData } from \"../../hooks/useFetchData\";\n\nexport const ChatPage: VFC = () => {\n  moment.locale(\"ja\");\n\n  //初回時のみ実行\n  useFetchData();\n\n  return (\n    <SComponentContainer>\n      <Header />\n      <InputArea />\n      <ChatDisplayArea />\n    </SComponentContainer>\n  );\n};\n\nconst SComponentContainer = styled.div`\n  min-height: 100vh;\n`;\n","import {\n  limitToLast,\n  onValue,\n  orderByChild,\n  query,\n  Query,\n} from \"firebase/database\";\nimport { useEffect } from \"react\";\n\nimport { setChatData } from \"../store/slices/chatDataSlice\";\nimport { convertChatData } from \"../functions/features/chatData/convertChatData\";\nimport { useAppDispatch } from \"./useAppDispatch\";\nimport { chatRef } from \"..\";\nimport { setIsChatsCompleted } from \"../store/slices/isChatsCompletedSlice\";\nimport { setHasMore } from \"../store/slices/hasMoreSlice\";\nimport { setLatestChatOrder } from \"../store/slices/latestChatOrderSlice\";\nimport { setLastChatOrder } from \"../store/slices/lastChatOrderSlice\";\nimport { FETCH_CHAT_NUM, START_CHAT_ORDER } from \"../assets/data/constNum\";\n\nexport const useFetchData = () => {\n  const { dispatch } = useAppDispatch();\n  const chatQuery: Query = query(\n    chatRef,\n    orderByChild(\"order\"),\n    limitToLast(FETCH_CHAT_NUM)\n  );\n\n  useEffect(() => {\n    //イベントリスナーのアタッチ、Firebaseのデータが変更される度に実行\n    onValue(query(chatQuery), (snapshot) => {\n      //データを変換して状態に保存\n      const newChatData = convertChatData(snapshot.val());\n      dispatch(setChatData(newChatData));\n\n      //一番最初と最後のチャットの番号を記録\n      if (newChatData.length === 0) {\n        dispatch(setLatestChatOrder(START_CHAT_ORDER - 1));\n        dispatch(setLastChatOrder(START_CHAT_ORDER));\n      } else {\n        const lastChatData = newChatData[newChatData.length - 1];\n        dispatch(setLatestChatOrder(newChatData[0].order));\n        dispatch(setLastChatOrder(lastChatData.order));\n      }\n\n      //更に読み込むページがあるかの判定\n      if (newChatData.length < FETCH_CHAT_NUM) {\n        dispatch(setHasMore(false));\n      } else {\n        dispatch(setHasMore(true));\n      }\n\n      dispatch(setIsChatsCompleted(true));\n    });\n    //dispatchに対して依存配列に入れるように警告がでるのでeslintを無効化\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n","export const pathData = { chatPage: \"/\" };\n","import { VFC } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { ChatPage } from \"../components/pages/ChatPage\";\n\nimport { pathData } from \"../assets/data/pathData\";\n\nexport const ComponentRouter: VFC = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path={pathData.chatPage}>\n                    <ChatPage />\n                </Route>\n                <Route path=\"*\">\n                    <Redirect to={{ pathname: pathData.chatPage }} />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { chatDataReducer } from \"./slices/chatDataSlice\";\nimport { isChatsCompletedReducer } from \"./slices/isChatsCompletedSlice\";\nimport { hasMoreReducer } from \"./slices/hasMoreSlice\";\nimport { latestChatOrderReducer } from \"./slices/latestChatOrderSlice\";\nimport { lastChatOrderReducer } from \"./slices/lastChatOrderSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    chatData: chatDataReducer,\n    isChatsCompleted: isChatsCompletedReducer,\n    hasMore: hasMoreReducer,\n    latestChatOrder: latestChatOrderReducer,\n    lastChatOrder: lastChatOrderReducer,\n  },\n});\n","import { VFC } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { ComponentRouter } from \"./router/ComponentRouter\";\n\nimport { store } from \"./store/store\";\n\nexport const App: VFC = () => {\n  return (\n    <Provider store={store}>\n      <ComponentRouter />\n    </Provider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { initializeApp } from \"firebase/app\";\n\nimport { App } from \"./App\";\n\nimport { firebaseConfig } from \"./config\";\nimport { getChatRef } from \"./functions/getChatRef\";\n\nexport const app = initializeApp(firebaseConfig);\nexport const chatRef = getChatRef(app);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyBWHpjDjI7YW1_ULoFJ-WCzas_FCsdpWlA\",\n    authDomain: \"chat-app-915d3.firebaseapp.com\",\n    databaseURL:\n        \"https://chat-app-915d3-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"chat-app-915d3\",\n    storageBucket: \"chat-app-915d3.appspot.com\",\n    messagingSenderId: \"321030390665\",\n    appId: \"1:321030390665:web:83c3ceaa9ae959930b1758\",\n    measurementId: \"G-V4HKR4STNF\",\n};\n","import { FirebaseApp } from \"firebase/app\";\nimport {\n    getDatabase,\n    Database,\n    ref,\n    DatabaseReference,\n} from \"firebase/database\";\n\nexport const getChatRef = (app: FirebaseApp) => {\n    //データベースの取得\n    const db: Database = getDatabase(app);\n    //データベース上のチャットへの参照を取得\n    const chatRef: DatabaseReference = ref(db, \"chats\");\n    return chatRef;\n};\n"],"sourceRoot":""}